/* eslint-disable max-len */

const {onDocumentCreated} = require("firebase-functions/v2/firestore");
const {Storage} = require("@google-cloud/storage");
const {setGlobalOptions} = require("firebase-functions/v2/options");
const {initializeApp} = require("firebase-admin/app");
const nodemailer = require("nodemailer");
const {setTimeout} = require("timers/promises");
const handlebars = require("handlebars");

setGlobalOptions({maxInstances: 10});
initializeApp();


const storage = new Storage();
const bucket = storage.bucket("pyro-dev-e424e.appspot.com");

const email = "pyrodev853@gmail.com";
const appPassword = "amhj hyqc lwwd mtwm";

const endpoint = "https://api.advicement.io/v1/templates/pub-tex-to-pdf-with-pdflatex-v1/compile";
const apiKey = "3a4039dd485de20dea0c7b95dee023ec0be111ec40ce5083eae2f2d6e34d9ca0";

handlebars.registerHelper("toFixed2", (value) => { // helper for restricting data to 2 decimal points
  if (typeof value === "number") { // checks if value is a number
    return value.toFixed(2); // format with 2 decimal places
  } else {
    return value; // if not a number, return value as is
  }
});

// .data refers to the data in the field which leads to filtering the ticketID
exports
    .onUserCreate = onDocumentCreated("tickets/{ticketID}", async (event) => {
      const ticket = event.data.data();
      const ticketID = event.params.ticketID;
      console.log("Document Created in Firebase: ", ticketID);
      // 'ticket' contains the values inside the new document
      // creates a file on GC storage named the ticketID.tex
      const file = bucket.file(`tickets/${ticketID}.pdf`);

      const transporter = nodemailer.createTransport({ // Setting email settings
        service: "Gmail",
        auth: {
          user: email,
          pass: appPassword,
        },
      });


      // grabs the template from the data payload and places it into memory
      const template = await getTemplate(ticket.template.link);
      const tex = template({
        items: ticket.purchaseTable,
        invoiceNumber: ticket.order.orderID,
        subtotal: ticket.subtotal,
        totalTax: ticket.totalTax,
        totalUSD: ticket.totalUSD,
        customer: ticket.order.customer,
        clientName: ticket.clientInfo.name,
        clientAddress: ticket.clientInfo.address,
        clientRoad: ticket.clientInfo.road,
        clientSubaddress: ticket.clientInfo.subAddress,
        clientPostal: ticket.clientInfo.postal,
        clientZip: ticket.clientInfo.zip,
        clientCountry: ticket.clientInfo.country,
      });

      const latex = compileLatex(tex);
      const response = await getPostData(latex, ticketID);
      const buffer = await Buffer.from(response, "binary");
      file.save(buffer);
      sendEmail(buffer, ticket, transporter);
    });


// eslint-disable-next-line require-jsdoc, no-unused-vars
async function sendEmail(buffer, ticket, transporter) {
  const content = await bucket.file(ticket.template.email).download()
      .then((data) => {
        console.log("Email Template Acquired");
        return data.toString("utf8");
      });
  const template = handlebars.compile(content);
  const replacement = {
    customer: `${ticket.order.employeeID}`,
    company_name: `${ticket.clientInfo.name}`,
    support_email: `${ticket.clientInfo.website}`,
    title: `${ticket.order.employeeTitle}`,
    email: `${ticket.clientInfo.website}`,
  };
  const html = template(replacement);

  const mailOptions = {
    from: email,
    to: ticket.email,
    subject: ("Pyro Compilation Email #" + ticket.order.orderID),
    text: (`Dear ${ticket.order.employeeID},\nWe would like to thank you for your recent purchase at ${ticket.clientInfo.name}. Your dedication to helping us achieve our mission means a lot to us here at ${ticket.clientInfo.name}.\nWe are committed to delivering the best experience you could possibly have.\nIf you have any questions, feel free to contact us at ${ticket.clientInfo.website} and we would be thrilled to assist you.\nOnce again, thank you for your purchase and support. We look forward to serving you in the future.\nBest regards\n${ticket.order.employeeID}}\n${ticket.clientInfo.name}\nGenerated by Project Pyro`),
    // eslint-disable-next-line no-useless-escape
    html: html, // html body
    attachments: [
      {
        filename: `invoice_${ticket.order.orderID}.pdf`,
        content: buffer,
      },
    ],
  };
  transporter.sendMail(mailOptions);
  console.log("Email Sent Successfully!");
}

// eslint-disable-next-line require-jsdoc
async function getTemplate(filename) {
  const content = await bucket.file(filename).download()
      .then((data) => {
        console.log("Template Acquired");
        return data.toString("utf8");
      });
  const template = handlebars.compile(content);
  return template;
}

/**
 * Formatting latex data into a JSON object
 * @param {string} latex
 * @return {object}
 */
function compileLatex(latex) {
  const output = {};
  output["texFileContent"] = latex;
  return output;
}

/**
 * Compiling latex
 * @param {string} body
 * @param {string} docID
 * @return {arrayBuffer}
 */
async function getPostData(body, docID) {
  console.log("Starting Compile!");
  const header = {
    "Adv-Security-Token": apiKey,
    "Content-Type": "application/json",
  };
  const options = {
    method: "POST",
    body: JSON.stringify(body),
    headers: header,
  };
  const response = await fetch(endpoint, options);
  const data = await response.json();
  const status = data["documentStatusUrl"];

  let statusResponse = await fetch(status);
  let statusVal = await statusResponse.json();

  let i; // index for "for-loop"
  for (i=0; statusVal["statusDescription"] === "document processing" && i < 10; i++) {
    await setTimeout(5000);
    statusResponse = await fetch(status);
    statusVal = await statusResponse.json();
    console.log(statusVal);
  }
  if (i >= 10) throw new Error("Dynamic Docs is taking too long");
  console.log("Document Compiled!");
  const pdf = statusVal["documentUrl"];
  if (!pdf) throw new Error("Dynamic Docs didnt include a pdf in the response");
  console.log("Grabbing Document");
  const pdfResponse = await fetch(pdf);
  console.log("Document Grabbed!");
  return await pdfResponse.arrayBuffer();
}
